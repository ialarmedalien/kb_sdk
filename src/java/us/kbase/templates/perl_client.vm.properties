package ${client_package_name};

use strict;
use warnings;

use JSON::RPC::Client;
use POSIX;
use Data::Dumper;
use URI;
use Bio::KBase::Exceptions;
#if( $any_async || $async_version)
use Time::HiRes;
#end
my $get_time = sub { time, 0 };
eval {
    require Time::HiRes;
    $get_time = sub { Time::HiRes::gettimeofday() };
};

#if( $authenticated )
use Bio::KBase::AuthToken;
#end

# Client version should match Impl version
# This is a Semantic Version number,
# http://semver.org
our $VERSION = "0.1.0";

=head1 NAME

${client_package_name}

=head1 DESCRIPTION

#foreach( $module in $modules )

${module.module_doc}
#end


=cut

sub new {
    my ( $class, $url, @args ) = @_;

#if( $default_service_url )
    $url //= '${default_service_url}';
#end
    my $self = {
        client  => ${client_package_name}::RpcClient->new,
        url     => $url,
        headers => [],
    };
    my %arg_hash = @args;

#if( $any_async || $async_version )
    $self->{ async_job_check_time } = 0.1;
    if ( exists $arg_hash{ async_job_check_time_ms } ) {
        $self->{ async_job_check_time } = $arg_hash{ async_job_check_time_ms } / 1000.0;
    }

    $self->{ async_job_check_time_scale_percent } = 150;
    if ( exists $arg_hash{ async_job_check_time_scale_percent } ) {
        $self->{ async_job_check_time_scale_percent } = $arg_hash{ async_job_check_time_scale_percent };
    }

    $self->{ async_job_check_max_time } = 300;    # 5 minutes
    if ( exists $arg_hash{ async_job_check_max_time_ms } ) {
        $self->{ async_job_check_max_time } = $arg_hash{ async_job_check_max_time_ms } / 1000.0;
    }

    my $service_version = #if($service_ver)'$service_ver'#{else}undef#{end};

    $service_version    = $arg_hash{ service_version }
        if exists $arg_hash{ service_version };
    $self->{ service_version }  = $service_version;
#end

    chomp( $self->{ hostname } = `hostname` );
    $self->{ hostname } ||= 'unknown-host';

    #
    # Set up for propagating KBRPC_TAG and KBRPC_METADATA environment variables through
    # to invoked services. If these values are not set, we create a new tag
    # and a metadata field with basic information about the invoking script.
    #
    if ( $ENV${empty_escaper}{ KBRPC_TAG } ) {
        $self->{ kbrpc_tag } = $ENV${empty_escaper}{ KBRPC_TAG };
    }
    else {
        my ( $t, $us )       = &$get_time();
        $us                  = sprintf( "%06d", $us );
        my $ts               = strftime( "%Y-%m-%dT%H:%M:%S.${us}Z", gmtime $t );
        $self->{ kbrpc_tag } = "C:$0:$self->{hostname}:$$:$ts";
    }
    push @{ $self->{ headers } }, 'Kbrpc-Tag', $self->{ kbrpc_tag };

    if ( $ENV${empty_escaper}{ KBRPC_METADATA } ) {
        $self->{ kbrpc_metadata } = $ENV${empty_escaper}{ KBRPC_METADATA };
        push @{ $self->{ headers } }, 'Kbrpc-Metadata', $self->{ kbrpc_metadata };
    }

    if ( $ENV${empty_escaper}{ KBRPC_ERROR_DEST } ) {
        $self->{ kbrpc_error_dest } = $ENV${empty_escaper}{ KBRPC_ERROR_DEST };
        push @{ $self->{ headers } }, 'Kbrpc-Errordest', $self->{ kbrpc_error_dest };
    }

#if( $authenticated )
    #
    # This module requires authentication.
    #
    # We create an auth token, passing through the arguments that we were (hopefully) given.
    if ( exists $arg_hash{ token } ) {
        $self->{ token } = $arg_hash{ token };
    }
    elsif ( exists $arg_hash{ user_id } ) {
        my $token = Bio::KBase::AuthToken->new( @args );
        $self->{ token } = $token->token unless $token->error_message;
    }

    $self->{ client }{ token } = $self->{ token } if $self->{ token };
#end

    my $ua      = $self->{ client }->ua;
    my $timeout = $ENV${empty_escaper}{ CDMI_TIMEOUT } || ( 30 * 60 );
    $ua->timeout( $timeout );
    bless $self, $class;
    return $self;
}

#foreach( $module in $modules )
#if( $any_async || $async_version)
# Authentication: ${method.authentication}
sub _check_job {
    my ( $self, @args ) = @_;

    my $args_specs = [
        {
            index       => 0,
            name        => 'job_id',
            value       => $job_id,
            validator   => sub { ref $job_id },
        }
    ];

    $self->_validate_params( '_check_job', 1, $args_specs, [ $job_id ] );

#     if ( ( my $n = @args ) != 1 ) {
#         Bio::KBase::Exceptions::ArgumentValidationError->throw(
#             error   =>  "Invalid argument count for function _check_job "
#                         . "(received $n, expecting 1)"
#         );
#     }
#
#     my ( $job_id ) = @args;
#     my @bad_arguments;
#
#     push @bad_arguments,
#         "Invalid type for argument 0 \"job_id\" (it should be a string)"
#         if ref $job_id;
#
#     if ( @bad_arguments ) {
#         my $msg = "Invalid arguments passed to _check_job:\n"
#             . join "", map { "\t$_\n" } @bad_arguments;
#         Bio::KBase::Exceptions::ArgumentValidationError->throw(
#             error       => $msg,
#             method_name => '_check_job'
#         );
#     }

    my $result = $self->_client_call(
        '_check_job',
#     my $result = $self->{ client }->call(
        $self->{ url },
        $self->{ headers },
        {
            method => "${module.module_name}._check_job",
            params => \@args
        }
    );

#     Bio::KBase::Exceptions::HTTP->throw(
#         error       => "Error invoking method _check_job",
#         status_line => $self->{ client }->status_line,
#         method_name => '_check_job'
#     ) unless $result;
#
#     Bio::KBase::Exceptions::JSONRPC->throw(
#         error       => $result->error_message,
#         code        => $result->content->{ error }{ code },
#         method_name => '_check_job',
#         # JSON::RPC::ReturnObject only supports JSONRPC 1.1 or 1.O
#         data        => $result->content->{ error }{ error }
#     ) if $result->is_error;

    return $result->result->[ 0 ];
}

#end

#set( $status_in_kidl = false )
#foreach( $method in $module.methods )
#if( ${method.name} == "status" )
#set( $status_in_kidl = true )
#end

#set( $last_module = $module )
#set( $last_method = $method )

=head2 ${method.name}

  #if( "$method.ret_vars" != "" )${method.ret_vars} = #{end}$obj->${method.name}(${method.arg_vars})

=over 4

=item Parameter and return types

=begin html

<pre>
#foreach( $docline in $method.arg_doc )
${docline}
#end

</pre>

=end html

=begin text

#foreach( $docline in $method.arg_doc )
${docline}
#end


=end text

=item Description

${method.doc}

=back

=cut

#if( $method.async || $async_version)
sub ${method.name} {
    my ( $self, @args ) = @_;
    my $job_id          = $self->_${method.name}_submit( @args );
    return $self->_async_job_check( $job_id );
}

# Authentication: ${method.authentication}
sub _${method.name}_submit {
    my ( $self, @args ) = @_;

#     if ( ( my $n = @args ) != ${method.arg_count} ) {
#         Bio::KBase::Exceptions::ArgumentValidationError->throw(
#             error   =>  "Invalid argument count for function _${method.name}_submit "
#                         . "(received $n, expecting ${method.arg_count})"
#         );
#     }

#if( $method.arg_count > 0 )
    my ( ${method.arg_vars} ) = @args;
    my $args_specs = [
#foreach( $param in $method.params )
        {   index       => ${param.index},
            name        => ${param.name},
            value       => ${param.perl_var},
            validator   => sub { ${param.validator} },
        },
#end
    ];
    $self->_validate_params( '_${method.name}_submit', ${method.arg_count}, $args_specs, \@args );

#     if ( @_bad_arguments ) {
#         my $msg = "Invalid arguments passed to ${method.name}:\n"
#             . join "", map { "\t$_\n" } @_bad_arguments;
#
#         Bio::KBase::Exceptions::ArgumentValidationError->throw(
#             error => $msg,
#             method_name => '${method.name}'
#         );
#     }
#end

    my $context = undef;
    if ( $self->{ service_version } ) {
        $context = { 'service_ver' => $self->{ service_version } };
    }

    my $result = $self->_client_call(
        '_${method.name}_submit',
#     my $result = $self->{ client }->call(
        $self->{ url },
        $self->{ headers },
        {
            method  => "${module.module_name}._${method.name}_submit",
            params  => \@args,
            context => $context
        }
    );

#     Bio::KBase::Exceptions::HTTP->throw(
#         error       => "Error invoking method _${method.name}_submit",
#         status_line => $self->{ client }->status_line,
#         method_name => '_${method.name}_submit',
#     ) unless $result;
#
#     Bio::KBase::Exceptions::JSONRPC->throw(
#         error       => $result->error_message,
#         code        => $result->content->{ error }{ code },
#         method_name => '_${method.name}_submit',
#         # JSON::RPC::ReturnObject only supports JSONRPC 1.1 or 1.O
#         data        => $result->content->{ error }{ error }
#     ) if $result->is_error;

    return $result->result->[ 0 ];
}

#else ## of if-any-async
sub ${method.name} {
    my ( $self, @args ) = @_;
    # Authentication: ${method.authentication}
#     if ( ( my $n = @args ) != ${method.arg_count} ) {
#         Bio::KBase::Exceptions::ArgumentValidationError->throw(
#             error   =>  "Invalid argument count for function ${method.name} "
#                         . "(received $n, expecting ${method.arg_count})"
#         );
#     }
#if( $method.arg_count > 0 )
    my ( ${method.arg_vars} ) = @args;
    my $args_specs = [
#foreach( $param in $method.params )
        {   index       => ${param.index},
            name        => ${param.name},
            value       => ${param.perl_var},
            validator   => sub { ${param.validator} },
        },
#end
    ];
    $self->_validate_params( '${method.name}', ${method.arg_count}, $args_specs, \@args );

#end

#if( $dynserv_ver )
    my $service_state = $self->get_service_status( "${module.module_name}" );
    my $url = $service_state->result->[ 0 ]->{ url };
#else
    my $url = $self->{ url };
#end

    my $result = $self->_client_call(
        '${method.name}',
#     my $result = $self->{ client }->call(
        $url,
        $self->{ headers },
        {
            method => "${module.module_name}.${method.name}",
            params => \@args,
        }
    );

#     Bio::KBase::Exceptions::HTTP->throw(
#         error       => "Error invoking method ${method.name}",
#         status_line => $self->{ client }->status_line,
#         method_name => '${method.name}',
#     ) unless $result;
#
#     Bio::KBase::Exceptions::JSONRPC->throw(
#         error       => $result->error_message,
#         code        => $result->content->{ error }{ code },
#         method_name => '${method.name}',
#         # JSON::RPC::ReturnObject only supports JSONRPC 1.1 or 1.O
#         data        => $result->content->{ error }{ error }
#     ) if $result->is_error;

#if( $method.ret_count > 0 )
    return wantarray ? @{ $result->result } : $result->result->[0];
#else
    return undef;
#end

}

#end ## of if-any-async
#end ## of foreach-method
#if( !$status_in_kidl )
#if( $async_version )

sub status {
    my ( $self, @args ) = @_;

    Bio::KBase::Exceptions::ArgumentValidationError->throw(
        error   =>  "Invalid argument count for function status "
                    . "(received " . scalar @args . ", expecting 0)"
    ) if @args;

    my $context = undef;
    $context = { 'service_ver' => $self->{ service_version } }
        if $self->{ service_version };

    my $result = $self->_client_call(
        '_status_submit',
#     my $result = $self->{ client }->call(
        $self->{ url },
        $self->{ headers },
        {
            method  => "${module.module_name}._status_submit",
            params  => \@args,
            context => $context
        }
    );

#     Bio::KBase::Exceptions::HTTP->throw(
#         error       => "Error invoking method _status_submit",
#         status_line => $self->{ client }->status_line,
#         method_name => '_status_submit',
#     ) unless $result;
#
#     Bio::KBase::Exceptions::JSONRPC->throw(
#         error       => $result->error_message,
#         code        => $result->content->{ error }{ code },
#         method_name => '_status_submit',
#         # JSON::RPC::ReturnObject only supports JSONRPC 1.1 or 1.O
#         data        => $result->content->{ error }{ error }
#     ) if $result->is_error;

    my $job_id = $result->result->[ 0 ];

    return $self->_async_job_check( $job_id );

}
#else ## of if-status-async

sub status {
    my ( $self, @args ) = @_;

    Bio::KBase::Exceptions::ArgumentValidationError->throw(
        error   =>  "Invalid argument count for function status "
                    . "(received " . scalar @args . ", expecting 0)"
    ) if @args;

    #if( $dynserv_ver )
    my $service_state = $self->get_service_status( "${module.module_name}" );
    my $url = $service_state->result->[ 0 ]->{ url };
    #else
    my $url = $self->{ url };
    #end

    my $result = $self->_client_call(
        'status',
#     my $result = $self->{ client }->call(
        $url,
        $self->{ headers },
        {
            method => "${module.module_name}.status",
            params => \@args,
        }
    );
#
#     Bio::KBase::Exceptions::HTTP->throw(
#         error       => "Error invoking method status",
#         status_line => $self->{ client }->status_line,
#         method_name => 'status'
#     ) unless $result;
#
#     Bio::KBase::Exceptions::JSONRPC->throw(
#         error       => $result->error_message,
#         code        => $result->content->{ error }{ code },
#         method_name => 'status',
#         # JSON::RPC::ReturnObject only supports JSONRPC 1.1 or 1.O
#         data        => $result->content->{ error }{ error }
#     ) if $result->is_error;

    return wantarray
        ? @{ $result->result }
        : $result->result->[ 0 ];
}
#end ## of if-status-async
#end ## of status_in_kidl
#end ## of foreach-module

sub version {
    my ( $self ) = @_;

    my $result = $self->_client_call(
        '${last_method.name}',
#     $self->{ client }->call(
        $self->{ url },
        $self->{ headers },
        {
            method => "${last_module.module_name}.version",
            params => [],
        }
    );

#     Bio::KBase::Exceptions::HTTP->throw(
#         error       => "Error invoking method ${last_method.name}",
#         status_line => $self->{ client }->status_line,
#         method_name => '${last_method.name}',
#     ) if $result;
#
#     Bio::KBase::Exceptions::JSONRPC->throw(
#         error       => $result->error_message,
#         code        => $result->content->{ code },
#         method_name => '${last_method.name}',
#     ) if $result->is_error;

    return wantarray
        ? @{ $result->result }
        : $result->result->[ 0 ];
}

sub _validate_version {
    my ($self) = @_;
    my $server_version = $self->version();
    my $client_version = $VERSION;
    my ( $client_major, $client_minor ) = split(/\./, $client_version);
    my ( $server_major, $server_minor ) = split(/\./, $server_version);

    if ( $server_major != $client_major ) {
        Bio::KBase::Exceptions::ClientServerIncompatible->throw(
            error           => "Major version numbers differ.",
            server_version  => $server_version,
            client_version  => $client_version
        );
    }

    if ( $server_minor < $client_minor ) {
        Bio::KBase::Exceptions::ClientServerIncompatible->throw(
            error           => "Client minor version greater than server minor version.",
            server_version  => $server_version,
            client_version  => $client_version
        );
    }

    if ( $server_minor > $client_minor ) {
        warn "New client version available for ${client_package_name}\n";
    }

    if ( $server_major == 0 ) {
        warn "${client_package_name} version is $server_version. API subject to change.\n";
    }
}

sub get_service_status {
    my ( $self, $module_name ) = @_;

    return $self->_client_call(
        'ServiceWizard.get_service_status',
        $self->{ url },
        $self->{ headers },
        {
            method => "ServiceWizard.get_service_status",
            params => [ {
                module_name => $module_name,
                version     => $self->{ service_version }
            } ]
        }
    );
}

sub _client_call {
    my ( $self, $method, @call_args ) = @_;

    my $result = $self->{ client }->call( @call_args );

    Bio::KBase::Exceptions::HTTP->throw(
        error       => "Error invoking method $method",
        status_line => $self->{ client }->status_line,
        method_name => $method,
    ) unless $result;

    Bio::KBase::Exceptions::JSONRPC->throw(
        error       => $result->error_message,
        code        => $result->content->{ error }{ code },
        method_name => $method,
        # JSON::RPC::ReturnObject only supports JSONRPC 1.1 or 1.O
        data        => $result->content->{ error }{ error }
    ) if $result->is_error;

    return $result;
}

sub _async_job_check {
    my ( $self, $job_id ) = @_;
    my $async_job_check_time = $self->{ async_job_check_time };

    while ( 1 ) {
        Time::HiRes::sleep( $async_job_check_time );

        $async_job_check_time *= $self->{ async_job_check_time_scale_percent } / 100.0;
        if ( $async_job_check_time > $self->{ async_job_check_max_time } ) {
            $async_job_check_time = $self->{ async_job_check_max_time };
        }

        my $job_state_ref = $self->_check_job( $job_id );

        if ( $job_state_ref->{ finished } != 0 ) {
            $job_state_ref->{ result } //= [];

            return wantarray
                ? @{ $job_state_ref->{ result } }
                : $job_state_ref->{ result }->[ 0 ];
        }
    }
}

sub _validate_params {
    my ( $self, $method, $expected_arg_count, $specs, $args ) = @_;


    Bio::KBase::Exceptions::ArgumentValidationError->throw(
        error   =>  "Invalid argument count for function $method_name "
                    . "(received " . ( scalar @$args ) . ", expecting $expected_arg_count)"
    ) unless @$args == $expected_arg_count;

    my @bad_arguments;

    for ( @$specs ) {
        push @bad_arguments,
             'Invalid type for argument ' . $_->{ index } . '"'
             . '"' . $_->{ name } . '" '
             . '(value was "'
             . $_->{ value } . '")'
            unless $_->{ validator }->();
    }
# foreach( $param in $method.params )
#     push @bad_arguments,
#         "Invalid type for argument ${param.index} \"${param.name}\" (value was \"${param.perl_var}\")"
#         unless ${param.validator};
# end
    if ( @bad_arguments ) {

        my $msg = "Invalid arguments passed to $method:\n"
            . join "", map { "\t$_\n" } @bad_arguments;

        Bio::KBase::Exceptions::ArgumentValidationError->throw(
            error       => $msg,
            method_name => '$method_name',
        );
    }





}

=head1 TYPES

#foreach( $type in $last_module.types )


=head2 ${type.name}

=over 4

#if( $type.comment && "$type.comment" != "" )


=item Description

${type.comment}
#end


=item Definition

=begin html

<pre>
${type.english}
</pre>

=end html

=begin text

${type.english}

=end text

=back

#end


=cut

package ${client_package_name}::RpcClient;
use base 'JSON::RPC::Client';
use POSIX;
use strict;
use warnings;

#
# Override JSON::RPC::Client::call because it doesn't handle error returns properly.
#

sub call {
    my ( $self, $uri, $headers, $obj ) = @_;
    my $result;

#if( $enable_client_retry )
    my @retries        = ( 1, 2, 5, 10, 20, 60, 60, 60, 60, 60, 60 );
    my %codes_to_retry = map { $_ => 1 } qw( 110 408 502 503 504 200 );
    my $n_retries;

    while ( 1 )
#end
    {

    if ( $uri =~ /\?/ ) {
        $result = $self->_get( $uri );
    }
    else {
        Carp::croak "not hashref." unless ( ref $obj eq 'HASH' );
        $result = $self->_post( $uri, $headers, $obj );
    }

#if( $enable_client_retry )
    #
    # Bail early on success.
    #
    if ( $result->is_success ) {
        if ( $n_retries ) {
            print STDERR strftime( "%F %T", localtime ),
                ": Request succeeded after $n_retries retries\n";
        }
        last;
    }
    $n_retries++;

    #
    # Failure. See if we need to retry and loop, or bail with
    # a permanent failure.
    #

    my $code       = $result->code;
    my $msg        = $result->message;
    my $want_retry = 0;

    $want_retry++ if $codes_to_retry${empty_escaper}{ $code };

    if (  !$want_retry
        && $code == 500
        && defined $result->header( 'client-warning' )
        && $result->header( 'client-warning' ) eq 'Internal response' ) {

        # Handle errors that were not thrown by the web
        # server but rather picked up by the client library.
        #
        # If we got a client timeout or connection refused, let us retry.

        $want_retry++ if $msg =~ /timeout|connection refused/i;
    }

    last if !$want_retry || ! @retries;

    #
    # otherwise, sleep & loop.
    my $retry_time = shift @retries;
    print STDERR strftime( "%F %T", localtime ),
        ": Request failed with code=$code msg=$msg, sleeping $retry_time and retrying\n";
    sleep( $retry_time );
#end

    }

    my $service = $obj->{ method } =~ /^system\./ if ( $obj );

    $self->status_line( $result->status_line );

    if ( $result->is_success ) {

        return undef unless $result->content;    # notification?

        return JSON::RPC::ServiceObject->new( $result, $self->json )
            if $service;

        return JSON::RPC::ReturnObject->new( $result, $self->json );
    }

    return JSON::RPC::ReturnObject->new( $result, $self->json )
        if $result->content_type eq 'application/json';

    return undef;

}


sub _post {
    my ( $self, $uri, $headers, $obj ) = @_;
    my $json = $self->json;

    $obj->{ version } ||= $self->{ version } || '1.1';

    if ( $obj->{ version } eq '1.0' ) {
        delete $obj->{ version };
        if ( exists $obj->{ id } ) {
            # if undef, it is notification.
            $self->id( $obj->{ id } ) if ( $obj->{ id } );
        }
        else {
            $obj->{ id } = $self->id || ( $self->id( 'JSON::RPC::Client' ) );
        }
    }
    else {
        # Assign a random number to the id if one hasn't been set
        $obj->{ id } = ( defined $self->id )
            ? $self->id
            : substr( rand(), 2 );
    }

    my $content = $json->encode( $obj );

    $self->ua->post(
        $uri,
        Content_Type => $self->{ content_type },
        Content      => $content,
        Accept       => 'application/json',
        @$headers,
        ( $self->{ token } ? ( Authorization => $self->{ token } ) : () ),
    );
}

1;
